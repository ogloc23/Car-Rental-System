generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(uuid())
  fullName                String
  email                   String    @unique
  phoneNumber             String    @unique
  address                 String?
  driversLicense          String    @unique
  password                String
  passwordUpdatedAt       DateTime  @default(now()) // Track password update date
  verified                Boolean   @default(false)
  verificationCode        String? // 4-digit verification code
  verificationCodeExpires DateTime? // Expiry timestamp for the code
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  role                    Role      @default(USER)

  // Relationships
  bookings     Booking[]
  payments     Payment[]
  activityLogs ActivityLog[] // âœ… Add this line to establish the relation
  purchases    Purchase[] // ðŸ›’ Add this line for the Purchase relation
}

model Car {
  id           String    @id @default(uuid())
  licensePlate String    @unique
  description  String
  imageUrl     String?
  carStatus    CarStatus @default(AVAILABLE)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  bookings  Booking[]
  purchases Purchase[]

  groupId String
  group   CarGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model CarGroup {
  id        String   @id @default(uuid())
  make      String
  model     String
  year      Int
  type      String
  price     Decimal  @db.Decimal(10, 2)
  count     Int      @default(1)       // ðŸ‘ˆ inventory count
  available Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  cars Car[]

  @@index([make, model, year, type])
}

model Booking {
  id              String        @id @default(uuid())
  userId          String
  carId           String
  startDate       DateTime
  endDate         DateTime
  totalPrice      Decimal       @default(0.0) @db.Decimal(10, 2) // ðŸ’° Improved precision
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  dropoffLocation String
  pickupLocation  String
  status          BookingStatus @default(PENDING)

  // Relationships
  car      Car       @relation(fields: [carId], references: [id])
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@unique([carId, startDate, endDate])
  @@index([userId, status])
}

model Payment {
  id        String   @id @default(uuid())
  userId    String
  bookingId String?
  reference String   @unique
  email     String
  amount    Decimal  @db.Decimal(10, 2) // ðŸ’° Improved precision
  currency  String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)

  @@index([userId, status])
}

// ðŸŽ­ Roles for user access control
enum Role {
  USER
  ADMIN
  STAFF
}

// ðŸš— Car availability status
enum CarStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
  SOLD
  ORDERED
}

// ðŸ“… Booking lifecycle status
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

model ActivityLog {
  id           String   @id @default(uuid())
  userId       String
  action       String
  resourceType String? // Optional: e.g., "User", "Booking", "Car"
  resourceId   String? // Optional: ID of the affected resource
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ListingType {
  RENT
  SALE
  BOTH
}

enum PurchaseStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

model Purchase {
  id          String         @id @default(uuid())
  userId      String?
  carId       String
  fullName    String
  email       String
  phoneNumber String
  price       Decimal        @db.Decimal(10, 2)
  status      PurchaseStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relationships
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  car  Car   @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@index([userId, status])
}
