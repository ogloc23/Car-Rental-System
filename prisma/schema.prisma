generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(uuid())
  fullName                String
  email                   String    @unique
  phoneNumber             String    @unique
  address                 String?
  driversLicense          String    @unique
  password                String
  verified                Boolean   @default(false)
  verificationCode        String?   // 4-digit verification code
  verificationCodeExpires DateTime? // Expiry timestamp for the code
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  role                    Role      @default(USER)


  // Relationships
  bookings       Booking[]
  payments       Payment[]
}

model Car {
  id           String    @id @default(uuid())
  make         String
  model        String
  year         Int
  licensePlate String    @unique
  type         String
  price        Decimal   @db.Decimal(10,2)  // ðŸ’° Improved precision
  availability Boolean   @default(true)
  description  String
  carStatus    CarStatus @default(AVAILABLE) 
  imageUrl     String?   // Stores the car image URL
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  bookings     Booking[]

  @@index([make, model])
}

model Booking {
  id              String        @id @default(uuid())
  userId          String
  carId           String
  startDate       DateTime
  endDate         DateTime
  totalPrice      Decimal       @default(0.0) @db.Decimal(10,2) // ðŸ’° Improved precision
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  dropoffLocation String
  pickupLocation  String
  status          BookingStatus @default(PENDING)

  // Relationships
  car             Car   @relation(fields: [carId], references: [id])
  user            User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments        Payment[]

  @@unique([carId, startDate, endDate])
  @@index([userId, status])
}

model Payment {
  id         String   @id @default(uuid())
  userId     String
  bookingId  String?
  reference  String   @unique
  email      String
  amount     Decimal  @db.Decimal(10,2)  // ðŸ’° Improved precision
  currency   String
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt  

  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)

  @@index([userId, status])
}

// ðŸŽ­ Roles for user access control
enum Role {
  USER
  ADMIN
  STAFF
}

// ðŸš— Car availability status
enum CarStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
}

// ðŸ“… Booking lifecycle status
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}
